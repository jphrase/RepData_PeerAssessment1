ggplot()+
geom_point(data=test,aes(x=x,y=y))+
geom_line(data=endpoints,aes(x=x,y=y),color='red',size=1)+
ggtitle('TEST SET')
x<-test$x
sum((test$y-predict(model,test))^2)
mean((test$y-predict(model,test))^2)
mse_test<-mean((test$y-predict(model,test))^2)
model<-lm(y~x+I(x^2),data=train)
model
f<-function(x){
return(predict(model,data.frame(x)))
}
ggplot()+
geom_point(data=train,aes(x=x,y=y))+
geom_line(data=endpoints,aes(x=x,y=y),color='red',size=1)+
stat_function(data=data.frame(x=c(1,9)),aes(x=x),fun=f,color='blue',size=1)+
ggtitle('TRAINING SET')
ggplot()+
geom_point(data=test,aes(x=x,y=y))+
geom_line(data=endpoints,aes(x=x,y=y),color='red',size=1)+
stat_function(data=data.frame(x=c(1,9)),aes(x=x),fun=f,color='blue',size=1)+
ggtitle('TEST SET')
mean((test$y-predict(model,test))^2)
for(i in 1:10){
print('hi')
}
for(i in 1:10){
print(i)
}
lm(y~x+I(x^2)+I(x^3),data=train)
lm(y~poly(x,3,raw=TRUE),data=train)
model<-lm(y~poly(x,3,raw=TRUE),data=train)
mse<-mean((test$y-predict(model,test)^2)
mse
model<-lm(y~poly(x,3,raw=TRUE),data=train)
mse<-mean((test$y-predict(model,test)^2)
mse
model<-lm(y~poly(x,3,raw=TRUE),data=train)
mse<-mean((test$y-predict(model,test))^2)
mse
for(i in 1:10){
model<-lm(y~poly(x,3,raw=TRUE),data=train)
mse<-mean((test$y-predict(model,test))^2)
print(mse)
}
for(i in 1:10){
model<-lm(y~poly(x,i,raw=TRUE),data=train)
mse<-mean((test$y-predict(model,test))^2)
print(mse)
}
mse<-numeric()
for(i in 1:10){
model<-lm(y~poly(x,i,raw=TRUE),data=train)
mse[i]<-mean((test$y-predict(model,test))^2)
}
mse
y<-mse
x<-1:10
mse_ploy<-data.frame(x,y)
ggplot()+
geom_point(data=mse_ploy,aes(x=x,y=y),size=2)
ggplot()+
geom_point(data=mse_ploy,aes(x=x,y=y),size=3)
geom_line(data=mse_ploy,aes(x=x,y=y)
ggplot()+
geom_point(data=mse_ploy,aes(x=x,y=y),size=3)
geom_line(data=mse_ploy,aes(x=x,y=y))
ggplot()+
geom_point(data=mse_ploy,aes(x=x,y=y),size=3)+
geom_line(data=mse_ploy,aes(x=x,y=y))
ggplot()+
geom_point(data=mse_ploy,aes(x=x,y=y),size=3)+
geom_line(data=mse_ploy,aes(x=x,y=y))+
xlab('polynomial degree')+
ylab('test MSE')
mse_calc<-function(train,test){
mse<-numeric()
for(i in 1:10){
model<-lm(y~poly(x,i,raw=TRUE),data=train)
mse[i]<-mean((test$y-predict(model,test))^2)
}
return(mse)
}
indices<-sample(1000,500)
train<-dat[indices,]
test<-dat[-indices,]
mse_calc(train,test)
indices<-sample(1000,500)
train<-dat[indices,]
test<-dat[-indices,]
mse_calc(train,test)
for(i in 1:10){
indices<-sample(1000,500)
train<-dat[indices,]
test<-dat[-indices,]
print(mse_calc(train,test))
}
x<-1:10
plot<-ggplot()
for(i in 1:10){
indices<-sample(1000,500)
train<-dat[indices,]
test<-dat[-indices,]
y<-mse_calc(train,test)
mse_poly<data.frame(x,y)
plot<-plot+geom_point(data=mse_poly,aes(x,y),sixe=3)
plot<-plot+geom_line(data=mse_poly,aes(x,y))
}
x<-1:10
plot<-ggplot()
for(i in 1:10){
indices<-sample(1000,500)
train<-dat[indices,]
test<-dat[-indices,]
y<-mse_calc(train,test)
mse_poly<-data.frame(x,y)
plot<-plot+geom_point(data=mse_poly,aes(x,y),sixe=3)
plot<-plot+geom_line(data=mse_poly,aes(x,y))
}
plot
x<-1:10
plot<-ggplot()+ylim(80,125)
for(i in 1:10){
indices<-sample(1000,500)
train<-dat[indices,]
test<-dat[-indices,]
y<-mse_calc(train,test)
mse_poly<-data.frame(x,y)
plot<-plot+geom_point(data=mse_poly,aes(x,y),sixe=3)
plot<-plot+geom_line(data=mse_poly,aes(x,y))
}
plot
install.packages("KernSmooth")
library(KernSmooth)
x <- 1:10
if(x > 5 { x <- 0})
if(x > 5) { x <- 0}
f <- function(x){}
f <- function(x){
g <- function(y){
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x<5) {
NA
} else {
10
}
y
?gl
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
x
str(split(x, list(f1, f2)))
?scale
swirl()
library(swirl)
swirl()
?update.packages
install.packages("knitr")
install.packages("markdown")
?unzip
getwd()
setwd("C:\Users\FHT\Coursera\DataScience\ReproducibleResearch\RepData_PeerAssessment1")
setwd("C:/Users/FHT/Coursera/DataScience/ReproducibleResearch/RepData_PeerAssessment1")
unzip("activity.zip")
act <- read.csv("activity.csv")
head(act)
str(act)
class(act$date)
?histogram
hist(act$steps)
?hist
hist(act$steps,breaks=act$date)
library(dplyr)
?summarise
?group_by
day_act <- group_by(act, date)
head(day_act)
summarise(day_act, sum(steps))
hist(summarise(day_act,sum(steps)))
hist(summarise(day_act,total_steps = sum(steps))$total_steps)
day_act
day_act <- summarise(act, total_steps=sum(steps))
day_act
day_act <- summarise(group_by(act,date), total_steps=sum(steps))
day_act
hist(day_act)
hist(day_act$total_steps)
as.Date(day_act$date)
day_act$date <- as.Date(day_act$date)
hist(day_act)
day_act$date <- as.numeric(day_act$date)
hist(day_act)
hist(day_act$total_steps)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
mean(day_act$total_steps)
median(day_act$total_steps)
hist(day_act$total_steps,
main="Total Number of Steps Taken Per Day",
ylab="Number of Days",
xlab="Daily Total Steps Taken",
ylim=c(0,30),
breaks=6
)
max(day_act$total_steps)
int_act <- summarise(group_by(act,interval),)
int_act <- summarise(group_by(act,interval),int_steps=mean(steps,na.rm=TRUE))
view(int_act)
View(int_act)
?plot
plot(int_act$interval,int_act$int_steps,type="l")
max(int_act$int_steps)
int_act[max(int_act$int_steps),1]
?which
max_int <- int_act[max(int_act$int_steps),1]
max_int
max_int <- as.numeric(int_act[max(int_act$int_steps),1])
max_int
?is.na
sum(is.na(act$steps))
sum(!is.na(act$steps))
int_act <- summarise(group_by(act,interval),
int_steps=mean(steps)
)
View(int_act)
day_act <- summarise(group_by(act,date),
daily_steps=sum(steps)
)
hist(day_act$daily_steps,
main="Total Number of Steps Taken Per Day",
ylab="Number of Days",
xlab="Daily Total Steps Taken",
ylim=c(0,30),
breaks=6
)
mean(day_act$daily_steps)
source('C:/Users/FHT/Coursera/DataScience/ReproducibleResearch/activity_monitoring_1.R')
?gsub
new_steps <- gsub("NA", mean(int_act$int_steps))
new_steps <- gsub("NA", mean(int_act$int_steps), act$steps)
new_steps <- gsub("NA", mean(int_act$int_steps, na.rm=TRUE), act$steps)
which(is.na(act$steps))
new_steps <- act$steps
act1 <- act
act1$steps[is.na(act1$steps)] <- int_act$int_steps
head(act1)
head(int_act)
act$fill_steps <- act$steps
tail(act1)
tail(act)
tail(int_act)
act$fill_steps[is.na(act$steps)] <- int_act$int_steps
tail(act)
?weekdays
weekdays(act$date)
weekdays(as.Date(act$date))
View(act)
v <- c(1,2,NA,4,5,6,7,8,9,10)
y <- c(1,2,3)
v[is.na(v)] <- y
y <- c(1,2,3,4,5)
v <- c(1,2,NA,4,5,6,7,NA,9,10)
v[is.na(v)] <- y
v <- c(1,2,NA,4,5,6,7,NA,9,10)
y <- c(1,2)
v[is.na(v)] <- y
v
group_by(act,interval)
?group_by
by_int <- group_by(act,interval,add=TRUE)
head(by_int)
by_int[interval]
?merge
act2 <- merge(act1,int_act,by=interval)
act2 <- merge(act1,int_act,by="interval")
head(act2)
tail(act2)
View(act2)
act2 <- merge(act1,int_act,by="interval",sort=FALSE)
View(act2)
act2 <- merge(act,int_act,by="interval",sort=FALSE)
View(act1)
source('C:/Users/FHT/Coursera/DataScience/ReproducibleResearch/activity_monitoring_1.R')
View(act)
source('C:/Users/FHT/Coursera/DataScience/ReproducibleResearch/activity_monitoring_1.R')
act1 <- merge(act,int_act,by="interval")
View(act1)
rm(act1)
act1 <- merge(act,int_act,by="interval")
View(act)
rm(act1)
act1 <- merge(act,int_act,by="interval")
View(act1)
View(act)
View(int_act)
?sort
act1 <- act1[order(act1$date)]
act1 <- act1[order(act1$date),]
act1 <- act1[order(as.Date(act1$date)),]
View(act1)
?impute
??impute
max(act1[495,c(2,4)])
act1[495,]
act1[9,]
max(act1[9,c(2,4)])
max(act1[9,c(2,4)],na.rm=TRUE
)
library(Hmisc)
x <- impute(act$steps)
x <- as.vector(impute(act$steps))
?max
act1$mod_steps <- max(act1$steps,act1$int_steps,na.rm=TRUE
)
View(act1)
act1$steps[is.na(act1$steps)] <- act1$int_steps
act1$mod_steps <- act1$int_steps[is.na(act1$steps)]
act1$mod_steps[is.na(act1$steps)] <- act1$int_steps[is.na(act1$steps)]
View(act1)
View(act1)
source('C:/Users/FHT/Coursera/DataScience/ReproducibleResearch/activity_monitoring_1.R')
View(act1)
act1$mod_steps[is.na(act1$steps)] <- act1$int_steps[is.na(act1$steps)]
act1$mod_steps <- act1$steps
View(act1)
act1$mod_steps[is.na(act1$steps)] <- act1$int_steps[is.na(act1$steps)]
View(act1)
head(act1)
act1 <- act1[order(act1$date),]
View(act1)
hist(day_act$daily_steps,
main="Total Number of Steps Taken Per Day",
ylab="Number of Days",
xlab="Daily Total Steps Taken",
ylim=c(0,30),
breaks=6
)
## Get mean & median steps per day
mean(day_act$daily_steps)
median(day_act$daily_steps)
source('C:/Users/FHT/Coursera/DataScience/ReproducibleResearch/activity_monitoring_1.R')
?weekdays()
weekdays(day_act$date)
weekdays(as.Date(day_act$date))
act1$weekday <- weekdays(as.Date(act1$date))
?weekend
wknd <- act1$weekday == "Saturday" | act1$weekday == "Sunday"
act1$weekday[act1$weekday == "Saturday" | act1$weekday == "Sunday"] <- "Weekend"
View(act1)
act1$weekday[act1$weekday != "Weekend"] <- "Weekday"
class(act1$weekday)
act1$weekday <- as.factor(act1$weekday)
library(lattice)
int_act1 <- summarise(group_by(act1,weekday,interval),int_steps=mean(steps,na.rm=TRUE))
par(mfrow=c(2,1))
?rm
?plot
?xyplot
plot(int_act1$interval,int_act1$int_steps,
type="l",
main="Average Number of Steps by Interval of Day",
xlab="Interval of Day",
ylab="Avg Number of Steps")
View(int_act1)
xyplot(int_steps - interval | weekday, int_act1)
xyplot(int_act1$int_steps - int_act1$interval | int_act1$weekday, int_act1)
xyplot(int_act1$int_steps - int_act1$interval | int_act1$weekday, int_act1, type="l")
xyplot(int_act1$int_steps ~ int_act1$interval | int_act1$weekday, int_act1, type="l")
xyplot(int_steps ~ interval | weekday, int_act1, type="l")
xyplot(int_steps ~ interval | weekday, int_act1,
type="l",
xlab="Interval of Day",
ylab="Avg Number of Steps")
getwd()
mean_steps <- mean(day_act$daily_steps)
med_steps <- median(day_act$daily_steps)
imp_mean_steps <- mean(day_act$daily_steps)
mean_diff <- imp_mean_steps - mean_steps
imp_med_steps <- median(day_act$daily_steps)
med_diff <- imp_med_steps - med_steps
mean_diff
med_diff
day_act1 <- summarise(group_by(act1,date),
daily_steps=sum(steps,na.rm=TRUE)
)
## Histogram of total steps taken per day with imputed values for NA
## 61 days, so bin ~10 days or breaks = 6
hist(day_act1$daily_steps,
main="Total Number of Steps Taken Per Day",
ylab="Number of Days",
xlab="Daily Total Steps Taken",
ylim=c(0,30),
breaks=6
)
hist(day_act1$daily_steps,
main="Total Number of Steps Taken Per Day",
ylab="Number of Days",
xlab="Daily Total Steps Taken",
##ylim=c(0,30),
breaks=6
)
View(day_act)
View(day_act1)
View(day_act)
day_act <- summarise(group_by(act,date),
daily_steps=sum(steps)
)
View(day_act)
hist(day_act$daily_steps,
main="Total Number of Steps Taken Per Day",
ylab="Number of Days",
xlab="Daily Total Steps Taken",
ylim=c(0,35),
breaks=6
)
mean(day_act$daily_steps)
View(int_act)
xyplot(int_steps ~ interval | weekday, int_act1,
type="l",
xlab="Interval of Day",
ylab="Avg Number of Steps")
par(mfrow=c(2,1))
## Plot
xyplot(int_steps ~ interval | weekday, int_act1,
type="l",
xlab="Interval of Day",
ylab="Avg Number of Steps")
par(mfrow=c(2,1))
xyplot(int_steps ~ interval | weekday, int_act1,
type="l",
xlab="Interval of Day",
ylab="Avg Number of Steps")
?panel.xYplot
?panel.xyplot
?detach
detach(lattice)
detach("lattice")
detach(lattice, unload=TRUE)
detach("package:lattice")
detach("package:Hmisc")
detach("package:lattice")
par(mfrow=c(2,1))
## Use lattice plotting
library(lattice)
## Plot
xyplot(int_steps ~ interval | weekday, int_act1,
type="l",
xlab="Interval of Day",
ylab="Avg Number of Steps")
?xyplot
xyplot(int_steps ~ interval | weekday, int_act1,
type="l",
xlab="Interval of Day",
ylab="Avg Number of Steps",
layout=c(1,2))
?knit2html
knit2html("PA1_template.Rmd")
library(knitr)
knit2html("PA1_template.Rmd")
imp_mean_steps <- mean(day_act1$daily_steps)
mean_diff <- imp_mean_steps - mean_steps
imp_med_steps <- median(day_act1$daily_steps)
med_diff <- imp_med_steps - med_steps
mean_diff
med_diff
knit2html("PA1_template.Rmd")
?format
med_diff
format(mean_steps,nsmall=0)
?int
?integer
knit2html("PA1_template.Rmd")
max_int
max_int*5*60
max_int*5*60/3600
max_int*5
max_int*5/60
max_int/5
max_int/5/60
View(int_act)
max_int <- as.integer(int_act[int_act$int_steps == max_steps,1])
max_int
max_steps
max_int <- as.integer(int_act[int_act$int_steps == max(int_act$int_steps),1])
max_int
max_int*5
?round
?mod
max_int %% 60
hod <- floor(max_int/60)
moh <- max_int %% 60
tod <- paste0(hod, ":", mod)
tod <- paste0(hod, ":", moh)
tod
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
